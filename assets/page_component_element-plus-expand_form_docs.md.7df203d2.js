import{_ as d,J as n,o,c as l,N as s,V as r,k as t,a as e}from"./chunks/framework.c4e3e1ab.js";const k=JSON.parse('{"title":"fpi-el-form 组件属性：","description":"","frontmatter":{},"headers":[],"relativePath":"page/component/element-plus-expand/form/docs.md","filePath":"page/component/element-plus-expand/form/docs.md","lastUpdated":1703130980000}'),c={name:"page/component/element-plus-expand/form/docs.md"},p=r(`<h1 id="fpi-el-form-组件属性" tabindex="-1">fpi-el-form 组件属性： <a class="header-anchor" href="#fpi-el-form-组件属性" aria-label="Permalink to &quot;fpi-el-form 组件属性：&quot;">​</a></h1><h2 id="_1-基本属性" tabindex="-1">1.基本属性 <a class="header-anchor" href="#_1-基本属性" aria-label="Permalink to &quot;1.基本属性&quot;">​</a></h2><p>同原生element-plus <a href="https://element-plus.org/zh-CN/component/form.html#form-attributes" target="_blank" rel="noreferrer">form</a> 属性 （与官方文档相同)</p><h2 id="_2-扩展属性" tabindex="-1">2.扩展属性： <a class="header-anchor" href="#_2-扩展属性" aria-label="Permalink to &quot;2.扩展属性：&quot;">​</a></h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>formOption</td><td>form配置项属性，对应每一条form-item组件，以下会详细讲解</td><td>Array</td><td>[]</td></tr><tr><td>formBtnOption</td><td>表单按钮配置项,对应生成表但末尾的按钮操作，以下会详细讲解</td><td>btnOptionTs</td><td>[]</td></tr><tr><td>btnBoxStyle</td><td>按钮盒子样式</td><td>Object</td><td>--</td></tr><tr><td>modelValue</td><td>表单v-model 对象，对应整个form关联变量对象</td><td>Object</td><td>--</td></tr><tr><td>labelWidth</td><td>标签的长度，例如 &#39;50px&#39;。 作为 Form 直接子元素的 form-item 会继承该值。 可以使用 auto。</td><td>String</td><td>&#39;120px&#39;</td></tr><tr><td>isText</td><td>是否是文本形式表单，用于切换编辑和查看模式</td><td>true/false</td><td>false</td></tr><tr><td>isShowBtnBox <span class="vp-tag">0.7.5</span></td><td>是否显示按钮</td><td>true/false</td><td>true</td></tr><tr><td>trigger <span class="vp-tag">0.7.5</span></td><td>设置整个form 的语法糖默认的校验触发时机</td><td><code>change</code>/<code>blur</code></td><td><code>change</code></td></tr></tbody></table><h2 id="formbtnoption" tabindex="-1">formBtnOption <a class="header-anchor" href="#formbtnoption" aria-label="Permalink to &quot;formBtnOption&quot;">​</a></h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>对应el-button类型</td><td>&#39;primary&#39;/&#39;success&#39;/&#39;warning&#39;/&#39;danger&#39;/&#39;info&#39;/&#39;text&#39;</td><td>--</td></tr><tr><td>label</td><td>按钮内部文字</td><td>string</td><td>--</td></tr><tr><td>size</td><td>按钮大小</td><td>&#39;large&#39;/&#39;default&#39;/&#39;small&#39;</td><td>--</td></tr><tr><td>click</td><td>点击事件</td><td>Function /&#39;submit&#39;/&#39;cancel&#39;</td><td>--</td></tr></tbody></table><h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h1><table><thead><tr><th>事件名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>submit</td><td>表单提交默认方法</td><td>--</td></tr><tr><td>cancel</td><td>表单取消默认方法</td><td>--</td></tr></tbody></table><h1 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h1><table><thead><tr><th>方法名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>getFormData</td><td>获取表单obj变量</td><td>--</td></tr><tr><td>getForm</td><td>获取 form dom</td><td>--</td></tr><tr><td>validate</td><td>对整个表单的内容进行验证。 接收一个回调函数，或返回 Promise。</td><td>--</td></tr><tr><td>validateField</td><td>验证具体的某个字段。</td><td>--</td></tr><tr><td>resetFields</td><td>重置该表单项，将其值重置为初始值，并移除校验结果。</td><td>--</td></tr><tr><td>scrollToField</td><td>滚动到指定的字段</td><td>--</td></tr><tr><td>clearValidate</td><td>清理某个字段的表单验证信息</td><td>--</td></tr><tr><td>refInput</td><td>获取内部input dom节点，对应input节点名称为设置的key值,formRef.refInput[key]</td><td>--</td></tr></tbody></table><h1 id="formoption数组内部对象可选值-属性详解" tabindex="-1">formOption数组内部对象可选值 属性详解 <a class="header-anchor" href="#formoption数组内部对象可选值-属性详解" aria-label="Permalink to &quot;formOption数组内部对象可选值 属性详解&quot;">​</a></h1><h2 id="_1-基本属性-1" tabindex="-1">1.基本属性 <a class="header-anchor" href="#_1-基本属性-1" aria-label="Permalink to &quot;1.基本属性&quot;">​</a></h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>prop</td><td>对应v-model对象内的key值，也就是变量名称。支持多级，如：<code>obj.name</code>, <code>0.key</code></td><td>string</td><td>--</td></tr><tr><td>label</td><td>输入框标题</td><td>string</td><td>string</td></tr><tr><td>labelWidth</td><td>标签宽度，例如 &#39;50px&#39;。 可以使用 auto。</td><td>string/number</td><td>--</td></tr><tr><td>required</td><td>是否为必填项，如不设置，则会根据校验规则确认</td><td>boolean</td><td>false</td></tr><tr><td>rules</td><td>自定义规则，内部定义一些语法糖，可以方便使用，下面会详细解释</td><td>Array/staticRulesKeyTs/Object</td><td>--</td></tr><tr><td>error</td><td>表单域验证错误时的提示信息。设置该值会导致表单验证状态变为 error，并显示该错误信息。</td><td>string</td><td>--</td></tr><tr><td>inlineMessage</td><td>是否显示校验错误信息。</td><td>boolean</td><td>true</td></tr><tr><td>showMessage</td><td>是否在行内显示校验信息。</td><td>boolean</td><td>false</td></tr><tr><td>size</td><td>用于控制该表单域下组件的默认尺寸</td><td>&#39;large&#39;/&#39;default&#39;/&#39;small&#39;</td><td>&#39;default&#39;</td></tr><tr><td>for</td><td>和原生标签相同能力</td><td>string</td><td>--</td></tr><tr><td>validateStatus</td><td>校验的状态</td><td>&#39;&#39;/&#39;error&#39;/&#39;validating&#39;/&#39;success&#39;</td><td>--</td></tr></tbody></table><h2 id="_2-扩展属性-1" tabindex="-1">2.扩展属性： <a class="header-anchor" href="#_2-扩展属性-1" aria-label="Permalink to &quot;2.扩展属性：&quot;">​</a></h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>按钮类型</td><td>fromTypeTs</td><td>--</td></tr><tr><td>value</td><td>默认值</td><td>any</td><td>--</td></tr><tr><td>slot</td><td>是否使用form插槽 true 时 此form-item 内部的输入框会可以由外部样式插入, 详细插槽见下方使用</td><td>boolean</td><td>--</td></tr><tr><td>labelSlot</td><td>是否使用label插槽 true 时 此form-item 内部的label会可以由外部样式插入</td><td>boolean</td><td>--</td></tr><tr><td>defaultSelect</td><td>select类型 默认选中的索引</td><td>number</td><td>--</td></tr><tr><td>itemRules</td><td>form item单独设置的rules 这个于rules属性重复后期升级可能会用到</td><td>Array</td><td>--</td></tr><tr><td>option</td><td>选择项列表</td><td>Array</td><td>--</td></tr><tr><td>inputWidth</td><td>输入框盒子大小</td><td>string</td><td>--</td></tr><tr><td>textStyle <span class="vp-tag">0.7.5</span></td><td>当type: &#39;text&#39; 或者 form 绑定 is-text时设置样式</td><td>Object</td><td>--</td></tr><tr><td>inputProps</td><td>对应直接绑定在input上的属性，详细见下</td><td>inputPropsTs</td><td>--</td></tr><tr><td>col</td><td>内部嵌套 对应element的col组件</td><td>formItemTs[]</td><td>--</td></tr><tr><td>span</td><td>col列内部属性 对应传的数组代表占整行的百分比 24是100% 12是50% 以此类推</td><td>number</td><td>--</td></tr><tr><td>gutter</td><td>col列内部属性 对应element的row组建的间隔属性</td><td>number</td><td>--</td></tr><tr><td>vHtml</td><td>col列内部属性 自定义dom内容 当key不传的时候使用</td><td>() =&gt; string</td><td>--</td></tr><tr><td>isLine</td><td>是否是分割线</td><td>boolean</td><td>--</td></tr><tr><td>lineLabel</td><td>分割线文字</td><td>string</td><td>--</td></tr><tr><td>lineLabelStyle</td><td>分割线文字样式</td><td>record</td><td>--</td></tr><tr><td>lineStyle</td><td>分割线样式</td><td>record</td><td>--</td></tr></tbody></table><h2 id="按钮类型" tabindex="-1">按钮类型 <a class="header-anchor" href="#按钮类型" aria-label="Permalink to &quot;按钮类型&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fromTypeTs =</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;time-picker&#39; // 时间选择 el-time-picker</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;date-picker&#39; // 日期选择 el-date-picker</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;select&#39; // 下拉选择 el-select</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;input&#39; // 输入框 el-input</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;checkbox&#39;// 复选 el-checkbox</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;radio&#39;// 单选 el-radio</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;textarea&#39;// 多行输入 el-textarea</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;switch&#39;// 开关 el-switch</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;dom&#39;// 自定义渲染dom</span></span>
<span class="line"><span style="color:#A6ACCD;">    | &#39;input-number&#39;// 计数器 el-input-number</span></span></code></pre></div><h3 id="rule语法糖" tabindex="-1">rule语法糖 <a class="header-anchor" href="#rule语法糖" aria-label="Permalink to &quot;rule语法糖&quot;">​</a></h3><p><code>trigger</code> form传入此属性用于设置整个form 的 语法糖默认的校验触发时机 <code>change</code>| <code>blur</code>。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&#39;email&#39; 邮箱验证 { type: &#39;email&#39;,required: true, message: &#39;请输入正确的邮箱格式&#39;, trigger: &#39;change&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;date&#39; 日期验证 { required: true, message: &#39;请选择时间&#39;, trigger: &#39;change&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;select&#39; 单选验证 { required: true, message: &#39;请选择&#39;, trigger: &#39;change&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;unNull&#39; 不为空 { required: true, message: &#39;不能为空&#39;, trigger: &#39;change&#39; }</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;number&#39; 数字 { type: &#39;number&#39;, message: &#39;请输入数字值&#39;, trigger: &#39;change&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;phone&#39; 手机号验证 { pattern: /^1[3456789]\\d{9}$/, message: &#39;手机号格式不正确&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;checkbox&#39; 复选验证 { type: &#39;array&#39;, required: true, message: &#39;请至少选择一项&#39;, trigger: &#39;change&#39; } ｜</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">--------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">string // 以上可以任意逗号分割组合 </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">--------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   email: &#39;自定义message&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">   unNull: &#39;自定义message&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">   .........</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h1 id="控制和设置内部输入框" tabindex="-1">控制和设置内部输入框 <a class="header-anchor" href="#控制和设置内部输入框" aria-label="Permalink to &quot;控制和设置内部输入框&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>对于内部没有二级嵌套的组件，如<code>input，switch，time-picker， input-number，date-picker</code>，其会继承全部 <code>inputProps</code>内的属性。</li><li>对于有二级的组件的，比如 <code>select</code>对应有：<code>el-select</code> 和 <code>el-option</code>，则<code>el-select</code>会继承全部 <code>inputProps</code>内的属性，而每一个<code>el-option</code>对应<code>option</code>内的每个对象，其会全部继承其属性。其他还有<code>radio,check</code>，都只需要设置 <code>inputProps</code> 和 <code>option</code>属性即可。</li><li>所有的内部输入框事件也都是继承在<code>inputProps</code>内，只需要在事件名称改为驼峰前加<code>on</code>即可，比如：<code>onChange: (val) =&gt; void 0</code></li><li>使用输入节点方法： 需要获取输入节点的dom,所以需要先获取<code>fpiElForm</code>实例，然后获取<code>refInput</code>属性，其包含所有的<code>form</code>内部节点的<code>dom</code>对象，相应的节点就是该节点对应的<code>props</code>的值，也就是： <code>fpiElForm.refInput[props]</code>。</li><li>所有选择框都封装为<code>option</code> 内显示文字为 <code>label</code> ,值为 <code>value</code>, 选择列表单独显示文字：<code>selectLabel</code>。</li><li><code>optionExpr</code> <span class="vp-tag">0.7.6</span>：格式<code>inputProps: { optionExpr: { value?: string, label?: string, selectLabel?: string } }</code>。可以设置修改 <code>option</code> 内的变量在对象内的 key 名称。</li></ol></div><p>示例：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const tableOption = [</span></span>
<span class="line"><span style="color:#A6ACCD;">    {</span></span>
<span class="line"><span style="color:#A6ACCD;">        type: &#39;checkbox&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        prop: &#39;data1&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        label: &#39;Checkbox&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        option: [</span></span>
<span class="line"><span style="color:#A6ACCD;">            {   </span></span>
<span class="line"><span style="color:#A6ACCD;">                value: &#39;1&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">                label: &#39;label&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">                onClick: val =&gt; console.log(&#39;onClick&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        ],</span></span>
<span class="line"><span style="color:#A6ACCD;">        inputProps: {</span></span>
<span class="line"><span style="color:#A6ACCD;">            clearable: true,</span></span>
<span class="line"><span style="color:#A6ACCD;">            placeholder: &#39;测试&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">            size: &#39;small&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">            onChange: val =&gt; console.log(&#39;onChange&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span></code></pre></div><h1 id="inputpropsts" tabindex="-1">inputPropsTs <a class="header-anchor" href="#inputpropsts" aria-label="Permalink to &quot;inputPropsTs&quot;">​</a></h1><h2 id="_1-input" tabindex="-1">1.input <a class="header-anchor" href="#_1-input" aria-label="Permalink to &quot;1.input&quot;">​</a></h2><p>所有<code>inputProps</code>内的属性都会传递到 <code>input</code> 上。</p><h3 id="_1-1-input-属性" tabindex="-1">1.1 input 属性 <a class="header-anchor" href="#_1-1-input-属性" aria-label="Permalink to &quot;1.1 input 属性&quot;">​</a></h3><p>所有<a href="https://element-plus.org/zh-CN/component/input.html#attributes" target="_blank" rel="noreferrer">el-input</a>属性都继承了，以下只介绍修改或者扩展属性</p><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>inputLimit</td><td>输入校验，方法时，如参是输入，出参为过滤后的参数，InputLimitTs为定义好的语法糖</td><td>function/InputLimitTs</td><td>--</td></tr><tr><td>prefix</td><td>el-input插槽</td><td>VNode</td><td>--</td></tr><tr><td>suffix</td><td>el-input插槽</td><td>VNode</td><td>--</td></tr><tr><td>prefixIcon</td><td>el-input插槽</td><td>VNode</td><td>--</td></tr><tr><td>suffixIcon</td><td>el-input插槽</td><td>VNode</td><td>--</td></tr><tr><td>prepend</td><td>el-input插槽</td><td>VNode</td><td>--</td></tr><tr><td>append</td><td>el-input插槽</td><td>VNode</td><td>--</td></tr><tr><td>isFocus</td><td>是否默认获取焦点</td><td>boolean</td><td>--</td></tr></tbody></table><h3 id="_1-2-inputlimit" tabindex="-1">1.2 InputLimit <a class="header-anchor" href="#_1-2-inputlimit" aria-label="Permalink to &quot;1.2 InputLimit&quot;">​</a></h3><p>设置<code>inputLimit</code> 内的值为以下字符串可以对输入进行限制，当然也支持回调函数形式，进行自定义设置。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&#39;number&#39; // 数字</span></span>
<span class="line"><span style="color:#A6ACCD;">| &#39;int&#39; // 整数</span></span>
<span class="line"><span style="color:#A6ACCD;">| &#39;positive-int&#39; // 正整数</span></span>
<span class="line"><span style="color:#A6ACCD;">| &#39;negative-int&#39; // 负数整数</span></span>
<span class="line"><span style="color:#A6ACCD;">| &#39;positive-number&#39; // 正数</span></span>
<span class="line"><span style="color:#A6ACCD;">| &#39;negative-number&#39; // 负数</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">or </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">function (val) =&gt; val</span></span></code></pre></div><h3 id="_1-3-事件" tabindex="-1">1.3 事件 <a class="header-anchor" href="#_1-3-事件" aria-label="Permalink to &quot;1.3 事件&quot;">​</a></h3><p>支持全部el-input<a href="https://element-plus.org/zh-CN/component/input.html#events" target="_blank" rel="noreferrer">事件</a>，只需要改为驼峰再其前面加上<code>on</code>, 就可以。</p><table><thead><tr><th>事件名</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>onBlur</td><td>当选择器的输入框失去焦点时触发</td><td><code>(event: FocusEvent) =&gt; void</code></td></tr><tr><td>onFocus</td><td>当选择器的输入框获得焦点时触发</td><td><code>(event: FocusEvent) =&gt; void</code></td></tr><tr><td>onChange</td><td>仅当 modelValue 改变时，当输入框失去焦点或用户按Enter时触发</td><td>\`(value: string</td></tr><tr><td>onInput</td><td>在 Input 值改变时触发</td><td>\`(value: string</td></tr><tr><td>onClear</td><td>在点击由 clearable 属性生成的清空按钮时触发</td><td><code>() =&gt; void</code></td></tr></tbody></table><h2 id="_2-select" tabindex="-1">2 select <a class="header-anchor" href="#_2-select" aria-label="Permalink to &quot;2 select&quot;">​</a></h2><p>所有<code>inputProps</code>内的属性都会传递到 <code>el-select</code> 上，支持全部<code>el-select</code>属性，事件只需在原事件名称改为驼峰加 <code>on</code>即可。<br><code>el-option</code> 属性只需在 <code>option</code> 内每个对象设置相应的值就可以绑定到相应的 <code>el-option</code>上，其支持全部 <code>el-option</code> 属性。<br> 详情请参考 element-plus 原文档<a href="https://element-plus.org/zh-CN/component/select.html#select-attributes" target="_blank" rel="noreferrer">el-select</a>。</p><h2 id="_3-checkbox" tabindex="-1">3 Checkbox <a class="header-anchor" href="#_3-checkbox" aria-label="Permalink to &quot;3 Checkbox&quot;">​</a></h2><ol><li>所有<code>inputProps</code>内的属性都会传递到 <code>checkboxGroup</code> 上，所有 <code>option</code>内的属性都会传递到 <code>Checkbox</code> 或者 <code>CheckboxButton</code> 上。</li><li>支持全部 Checkbox 全部事件，只需在其<code>option</code> 内对应的对象内设置事件名称的属性，前面加上on就可以。</li><li>开启<code>CheckboxButton</code>模式只需将<code>inputProps</code>内的<code>type</code>属性设置为<code>type: &#39;button&#39;</code> 即可。</li><li><code>option</code> 内显示文字为 <code>label</code> ,值为 <code>value</code>。<br> 详情请参考 element-plus 原文档 <a href="https://element-plus.org/zh-CN/component/checkbox.html#checkboxgroup-attributes" target="_blank" rel="noreferrer">checkbox</a>。</li></ol><h2 id="_4-input-number-计数器" tabindex="-1">4 input-number (计数器) <a class="header-anchor" href="#_4-input-number-计数器" aria-label="Permalink to &quot;4 input-number (计数器)&quot;">​</a></h2><p>所有<code>inputProps</code>内的属性都会传递到 <code>input-number</code> 上，事件只需在原事件名称改为驼峰加 <code>on</code>即可。<br> 详情请参考 element-plus 原文档 <a href="https://element-plus.org/zh-CN/component/input-number.html#attributes" target="_blank" rel="noreferrer">input-number</a>。</p><h2 id="_5-datepicker" tabindex="-1">5 DatePicker <a class="header-anchor" href="#_5-datepicker" aria-label="Permalink to &quot;5 DatePicker&quot;">​</a></h2><p>所有<code>inputProps</code>内的属性都会传递到 <code>DatePicker</code> 上，事件只需在原事件名称改为驼峰加 <code>on</code>即可。<br> 详情请参考 element-plus 原文档 <a href="https://element-plus.org/zh-CN/component/date-picker.html#attributes" target="_blank" rel="noreferrer">DatePicker</a>, <a href="https://element-plus.org/zh-CN/component/datetime-picker.html#attributes" target="_blank" rel="noreferrer">datetime-picker</a>。</p><h2 id="_6-radio" tabindex="-1">6 radio <a class="header-anchor" href="#_6-radio" aria-label="Permalink to &quot;6 radio&quot;">​</a></h2><p>所有<code>inputProps</code>内的属性都会传递到 <code>el-radio-group</code> 上，支持全部<code>el-radio-group</code>属性，事件只需在原事件名称改为驼峰加 <code>on</code>即可。<br> el-radio and el-radio-button 属性只需在 <code>option</code> 内每个对象设置相应的值就可以绑定到相应的 <code>el-radio</code> 或者 <code>el-radio-button</code> 上，其支持全部 <code>el-radio</code> 属性。<br> 开启<code>el-radio-button</code>模式只需将<code>inputProps</code>内的<code>type</code>属性设置为<code>type: &#39;button&#39;</code> 即可。<br> 详情请参考 element-plus 原文档<a href="https://element-plus.org/zh-CN/component/radio.html#radiogroup-attributes" target="_blank" rel="noreferrer">el-radio</a>。</p><h2 id="_7-switch" tabindex="-1">7 switch <a class="header-anchor" href="#_7-switch" aria-label="Permalink to &quot;7 switch&quot;">​</a></h2><p>所有<code>inputProps</code>内的属性都会传递到 <code>el-switch</code> 上，支持全部<code>el-switch</code>属性，事件只需在原事件名称加 <code>on</code>即可。<br> 详情请参考 element-plus 原文档<a href="https://element-plus.org/zh-CN/component/switch.html#%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">el-switch</a>。</p><h2 id="_8-timepicker" tabindex="-1">8 TimePicker <a class="header-anchor" href="#_8-timepicker" aria-label="Permalink to &quot;8 TimePicker&quot;">​</a></h2><p>所有<code>inputProps</code>内的属性都会传递到 <code>el-TimePicker</code> 上，支持全部<code>el-TimePicker</code>属性，事件只需在原事件名称改为驼峰加 <code>on</code>即可。<br> 详情请参考 element-plus 原文档<a href="https://element-plus.org/zh-CN/component/time-picker.html#timepicker-%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">el-TimePicker</a>。</p><h2 id="btnoptionts配置项-直接绑定在form上" tabindex="-1">btnOptionTs配置项（直接绑定在form上） <a class="header-anchor" href="#btnoptionts配置项-直接绑定在form上" aria-label="Permalink to &quot;btnOptionTs配置项（直接绑定在form上）&quot;">​</a></h2><p>btnOptionTs （object[]）,内部的每一个对象代表着一个 <code>el-button</code>, 其会继承全部对象内的属性，<a href="https://element-plus.org/zh-CN/component/button.html#button-attributes" target="_blank" rel="noreferrer">el-button</a>。<br> 事件只需要在原事件名称改为驼峰前加一个 <code>on</code> 即可， 例如： <code>@click =&gt; onClick, @dblclick =&gt; ondblclick</code>。 默认如下：<code>onClick</code>有默认封装好 <code>submit</code> and <code>cancel</code>事件，前者会自动校验表单，成功才会回调，后者会重置表单为最初值，清除校验（如果有设置value会恢复到value值）。<br> 所有<code>onClick</code>事件都会默认传入两个参数，第一个是<code>fpiElForm</code>实例本身，第二个是点击时间原参数<code>Event</code>,其他方法维持原事件参数。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    type: &#39;primary&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    label: &#39;提交&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    onClick: &#39;submit&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    label: &#39;取消&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    onClick: &#39;cancel&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="form-scoped-slot" tabindex="-1">form Scoped Slot <a class="header-anchor" href="#form-scoped-slot" aria-label="Permalink to &quot;form Scoped Slot&quot;">​</a></h2>`,55),i=t("table",{formItem:""},[t("thead",null,[t("tr",null,[t("th",null,"name"),t("th",null,"说明")])]),t("tbody",null,[t("tr",null,[t("td",null,[e("default "),t("span",{class:"vp-tag"},"0.8.15")]),t("td",null,"默认插槽，会放在按钮和option输入列表中间，占满整行")]),t("tr",{formItem:""},[t("td",null,[t("code",null,"${slotLine}"),e(),t("span",{class:"vp-tag"},"0.8.16")]),t("td",null,[e("设置 "),t("code",null,"slotLine: 'name'"),e(" 定义的名称就是此option会为外部预留一个具名插槽，用于自定义这一整行，插槽名称就是 "),t("code",null,"slotLine"),e("的值，记得不要和其他的"),t("code",null,"prop"),e(" 值重复哦！插槽入参为")])]),t("tr",{formItem:""},[t("td",null,[t("code",null,"${prop}")]),t("td",null,[e("自定义输入框的内容,需要对应配置像设置 "),t("code",null,"slot"),e(" 参数为"),t("code",null,"true"),e("，插槽入参为")])]),t("tr",null,[t("td",null,[t("code",null,"${prop}-label")]),t("td",null,[e("自定义输入框文案的内容， 需要对应配置像设置 "),t("code",null,"labelSlot"),e(" 参数为"),t("code",null,"true"),e(". 插槽入参为 ")])])])],-1),h=t("h2",{id:"贡献者",tabindex:"-1"},[e("贡献者： "),t("a",{class:"header-anchor",href:"#贡献者","aria-label":'Permalink to "贡献者："'},"​")],-1);function u(m,b,C,A,f,g){const a=n("ContributorView");return o(),l("div",null,[p,i,h,s(a,{name:"马佳辉"})])}const D=d(c,[["render",u]]);export{k as __pageData,D as default};
